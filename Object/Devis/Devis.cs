using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WebservicesSage.Object.Devis;
//
//    var devis = Devis.FromJson(jsonString);

namespace WebservicesSage.Object.Devis
{
    

    public partial class Devis
    {
        [JsonProperty("items")]
        public List<DevisItem> Items { get; set; }

        [JsonProperty("search_criteria")]
        public SearchCriteria SearchCriteria { get; set; }

        [JsonProperty("total_count")]
        public long TotalCount { get; set; }
    }

    public partial class DevisItem
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("updated_at")]
        public DateTimeOffset UpdatedAt { get; set; }

        [JsonProperty("is_active")]
        public bool IsActive { get; set; }

        [JsonProperty("is_virtual")]
        public bool IsVirtual { get; set; }

        [JsonProperty("items")]
        public List<ItemItem> Items { get; set; }

        [JsonProperty("items_count")]
        public long ItemsCount { get; set; }

        [JsonProperty("items_qty")]
        public long ItemsQty { get; set; }

        [JsonProperty("customer")]
        public Customer Customer { get; set; }

        [JsonProperty("billing_address")]
        public BillingAddress BillingAddress { get; set; }

        [JsonProperty("orig_order_id")]
        public long OrigOrderId { get; set; }

        [JsonProperty("currency")]
        public Currency Currency { get; set; }

        [JsonProperty("customer_is_guest")]
        public bool CustomerIsGuest { get; set; }

        [JsonProperty("customer_note_notify")]
        public bool CustomerNoteNotify { get; set; }

        [JsonProperty("customer_tax_class_id")]
        public long CustomerTaxClassId { get; set; }

        [JsonProperty("store_id")]
        public long StoreId { get; set; }
    }

    public partial class BillingAddress
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("region")]
        public object Region { get; set; }

        [JsonProperty("region_id")]
        public object RegionId { get; set; }

        [JsonProperty("region_code")]
        public object RegionCode { get; set; }

        [JsonProperty("country_id")]
        public object CountryId { get; set; }

        [JsonProperty("street")]
        public List<string> Street { get; set; }

        [JsonProperty("telephone")]
        public object Telephone { get; set; }

        [JsonProperty("postcode")]
        public object Postcode { get; set; }

        [JsonProperty("city")]
        public object City { get; set; }

        [JsonProperty("firstname")]
        public object Firstname { get; set; }

        [JsonProperty("lastname")]
        public object Lastname { get; set; }

        [JsonProperty("customer_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? CustomerId { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("same_as_billing")]
        public long SameAsBilling { get; set; }

        [JsonProperty("save_in_address_book")]
        public long SaveInAddressBook { get; set; }
    }

    public partial class Currency
    {
        [JsonProperty("global_currency_code")]
        public string GlobalCurrencyCode { get; set; }

        [JsonProperty("base_currency_code")]
        public string BaseCurrencyCode { get; set; }

        [JsonProperty("store_currency_code")]
        public string StoreCurrencyCode { get; set; }

        [JsonProperty("quote_currency_code", NullValueHandling = NullValueHandling.Ignore)]
        public string QuoteCurrencyCode { get; set; }

        [JsonProperty("store_to_base_rate")]
        public long StoreToBaseRate { get; set; }

        [JsonProperty("store_to_quote_rate")]
        public long StoreToQuoteRate { get; set; }

        [JsonProperty("base_to_global_rate")]
        public long BaseToGlobalRate { get; set; }

        [JsonProperty("base_to_quote_rate")]
        public long BaseToQuoteRate { get; set; }
    }

    public partial class Customer
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("group_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? GroupId { get; set; }

        [JsonProperty("default_billing", NullValueHandling = NullValueHandling.Ignore)]
        //[JsonConverter(typeof(ParseStringConverter))]
        public string DefaultBilling { get; set; }

        [JsonProperty("default_shipping", NullValueHandling = NullValueHandling.Ignore)]
        //[JsonConverter(typeof(ParseStringConverter))]
        public string DefaultShipping { get; set; }

        [JsonProperty("created_at", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CreatedAt { get; set; }

        [JsonProperty("updated_at", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? UpdatedAt { get; set; }

        [JsonProperty("created_in", NullValueHandling = NullValueHandling.Ignore)]
        public string CreatedIn { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("firstname")]
        public string Firstname { get; set; }

        [JsonProperty("lastname")]
        public string Lastname { get; set; }

        [JsonProperty("gender", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gender { get; set; }

        [JsonProperty("store_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? StoreId { get; set; }

        [JsonProperty("website_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? WebsiteId { get; set; }

        [JsonProperty("addresses", NullValueHandling = NullValueHandling.Ignore)]
        public List<Address> Addresses { get; set; }

        [JsonProperty("disable_auto_group_change", NullValueHandling = NullValueHandling.Ignore)]
        public long? DisableAutoGroupChange { get; set; }

        [JsonProperty("extension_attributes", NullValueHandling = NullValueHandling.Ignore)]
        public ExtensionAttributes ExtensionAttributes { get; set; }

        [JsonProperty("custom_attributes", NullValueHandling = NullValueHandling.Ignore)]
        public List<CustomAttribute> CustomAttributes { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("customer_id")]
        public long CustomerId { get; set; }

        [JsonProperty("region")]
        public RegionClass Region { get; set; }

        [JsonProperty("region_id")]
        public long RegionId { get; set; }

        [JsonProperty("country_id")]
        public string CountryId { get; set; }

        [JsonProperty("street")]
        public List<string> Street { get; set; }

        [JsonProperty("telephone")]
        public string Telephone { get; set; }

        [JsonProperty("postcode")]
        //[JsonConverter(typeof(ParseStringConverter))]
        public string Postcode { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("firstname")]
        public string Firstname { get; set; }

        [JsonProperty("lastname")]
        public string Lastname { get; set; }

        [JsonProperty("default_billing", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DefaultBilling { get; set; }

        [JsonProperty("default_shipping", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DefaultShipping { get; set; }
    }

    public partial class RegionClass
    {
        [JsonProperty("region_code")]
        //[JsonConverter(typeof(ParseStringConverter))]
        public string RegionCode { get; set; }

        [JsonProperty("region")]
        public string Region { get; set; }

        [JsonProperty("region_id")]
        public long RegionId { get; set; }
    }

    public partial class CustomAttribute
    {
        [JsonProperty("attribute_code")]
        public string AttributeCode { get; set; }

        [JsonProperty("value")]
        //[JsonConverter(typeof(ParseStringConverter))]
        public string Value { get; set; }
    }

    public partial class ExtensionAttributes
    {
        [JsonProperty("is_subscribed")]
        public bool IsSubscribed { get; set; }
    }

    public partial class ItemItem
    {
        [JsonProperty("item_id")]
        public long ItemId { get; set; }

        [JsonProperty("sku")]
        public string Sku { get; set; }

        [JsonProperty("qty")]
        public long Qty { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("price")]
        public double Price { get; set; }

        [JsonProperty("product_type")]
        public string ProductType { get; set; }

        [JsonProperty("quote_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long QuoteId { get; set; }
    }

    public partial class SearchCriteria
    {
        [JsonProperty("filter_groups")]
        public List<object> FilterGroups { get; set; }
    }

    public enum CurrencyCode { Eur };

    public enum City { LesUlis, Orléans, Palaiseau };

    public enum CountryId { Fr };

    public enum Firstname { Agathe, Audrey, ZzzTestTargéAudrey };

    public enum Lastname { Aumont, Targé, Test };

    public enum RegionEnum { Loiret };

    public enum ProductType { Simple };

    public partial class Devis
    {
        public static Devis FromJson(string json) => JsonConvert.DeserializeObject<Devis>(json, WebservicesSage.Object.Devis.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Devis self) => JsonConvert.SerializeObject(self, WebservicesSage.Object.Devis.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                /*CurrencyCodeConverter.Singleton,
                CityConverter.Singleton,
                CountryIdConverter.Singleton,
                FirstnameConverter.Singleton,
                LastnameConverter.Singleton,
                RegionEnumConverter.Singleton,
                ProductTypeConverter.Singleton,*/
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
    /*
    internal class CurrencyCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CurrencyCode) || t == typeof(CurrencyCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "EUR")
            {
                return CurrencyCode.Eur;
            }
            throw new Exception("Cannot unmarshal type CurrencyCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CurrencyCode)untypedValue;
            if (value == CurrencyCode.Eur)
            {
                serializer.Serialize(writer, "EUR");
                return;
            }
            throw new Exception("Cannot marshal type CurrencyCode");
        }

        public static readonly CurrencyCodeConverter Singleton = new CurrencyCodeConverter();
    }

    internal class CityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(City) || t == typeof(City?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "LES ULIS":
                    return City.LesUlis;
                case "Orléans":
                    return City.Orléans;
                case "PALAISEAU":
                    return City.Palaiseau;
            }
            throw new Exception("Cannot unmarshal type City");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (City)untypedValue;
            switch (value)
            {
                case City.LesUlis:
                    serializer.Serialize(writer, "LES ULIS");
                    return;
                case City.Orléans:
                    serializer.Serialize(writer, "Orléans");
                    return;
                case City.Palaiseau:
                    serializer.Serialize(writer, "PALAISEAU");
                    return;
            }
            throw new Exception("Cannot marshal type City");
        }

        public static readonly CityConverter Singleton = new CityConverter();
    }

    internal class CountryIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CountryId) || t == typeof(CountryId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "FR")
            {
                return CountryId.Fr;
            }
            throw new Exception("Cannot unmarshal type CountryId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CountryId)untypedValue;
            if (value == CountryId.Fr)
            {
                serializer.Serialize(writer, "FR");
                return;
            }
            throw new Exception("Cannot marshal type CountryId");
        }

        public static readonly CountryIdConverter Singleton = new CountryIdConverter();
    }

    internal class FirstnameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Firstname) || t == typeof(Firstname?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AUDREY":
                    return Firstname.Audrey;
                case "Agathe":
                    return Firstname.Agathe;
                case "ZZZ TEST TARGÉ AUDREY":
                    return Firstname.ZzzTestTargéAudrey;
            }
            throw new Exception("Cannot unmarshal type Firstname");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Firstname)untypedValue;
            switch (value)
            {
                case Firstname.Audrey:
                    serializer.Serialize(writer, "AUDREY");
                    return;
                case Firstname.Agathe:
                    serializer.Serialize(writer, "Agathe");
                    return;
                case Firstname.ZzzTestTargéAudrey:
                    serializer.Serialize(writer, "ZZZ TEST TARGÉ AUDREY");
                    return;
            }
            throw new Exception("Cannot marshal type Firstname");
        }

        public static readonly FirstnameConverter Singleton = new FirstnameConverter();
    }

    internal class LastnameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Lastname) || t == typeof(Lastname?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Aumont":
                    return Lastname.Aumont;
                case "TARGÉ":
                    return Lastname.Targé;
                case "Test":
                    return Lastname.Test;
            }
            throw new Exception("Cannot unmarshal type Lastname");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Lastname)untypedValue;
            switch (value)
            {
                case Lastname.Aumont:
                    serializer.Serialize(writer, "Aumont");
                    return;
                case Lastname.Targé:
                    serializer.Serialize(writer, "TARGÉ");
                    return;
                case Lastname.Test:
                    serializer.Serialize(writer, "Test");
                    return;
            }
            throw new Exception("Cannot marshal type Lastname");
        }

        public static readonly LastnameConverter Singleton = new LastnameConverter();
    }
    */
    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
    /*
    internal class RegionEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RegionEnum) || t == typeof(RegionEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Loiret")
            {
                return RegionEnum.Loiret;
            }
            throw new Exception("Cannot unmarshal type RegionEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RegionEnum)untypedValue;
            if (value == RegionEnum.Loiret)
            {
                serializer.Serialize(writer, "Loiret");
                return;
            }
            throw new Exception("Cannot marshal type RegionEnum");
        }

        public static readonly RegionEnumConverter Singleton = new RegionEnumConverter();
    }

    internal class ProductTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProductType) || t == typeof(ProductType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "simple")
            {
                return ProductType.Simple;
            }
            throw new Exception("Cannot unmarshal type ProductType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProductType)untypedValue;
            if (value == ProductType.Simple)
            {
                serializer.Serialize(writer, "simple");
                return;
            }
            throw new Exception("Cannot marshal type ProductType");
        }

        public static readonly ProductTypeConverter Singleton = new ProductTypeConverter();
    }*/
}

