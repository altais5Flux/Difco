using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WebservicesSage.Object;
//
//    var attributeSearchCriteria = AttributeSearchCriteria.FromJson(jsonString);



namespace WebservicesSage.Object.Search
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AttributeSearchCriteria
    {
        [JsonProperty("items")]
        public List<Item> Items { get; set; }

        [JsonProperty("search_criteria")]
        public SearchCriteria SearchCriteria { get; set; }

        [JsonProperty("total_count")]
        public long TotalCount { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("is_wysiwyg_enabled")]
        public bool IsWysiwygEnabled { get; set; }

        [JsonProperty("is_html_allowed_on_front")]
        public bool IsHtmlAllowedOnFront { get; set; }

        [JsonProperty("used_for_sort_by")]
        public bool UsedForSortBy { get; set; }

        [JsonProperty("is_filterable")]
        public bool IsFilterable { get; set; }

        [JsonProperty("is_filterable_in_search")]
        public bool IsFilterableInSearch { get; set; }

        [JsonProperty("is_used_in_grid")]
        public bool IsUsedInGrid { get; set; }

        [JsonProperty("is_visible_in_grid")]
        public bool IsVisibleInGrid { get; set; }

        [JsonProperty("is_filterable_in_grid")]
        public bool IsFilterableInGrid { get; set; }

        [JsonProperty("position")]
        public long Position { get; set; }

        [JsonProperty("apply_to")]
        public List<object> ApplyTo { get; set; }

        [JsonProperty("is_searchable")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IsSearchable { get; set; }

        [JsonProperty("is_visible_in_advanced_search")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IsVisibleInAdvancedSearch { get; set; }

        [JsonProperty("is_comparable")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IsComparable { get; set; }

        [JsonProperty("is_used_for_promo_rules")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IsUsedForPromoRules { get; set; }

        [JsonProperty("is_visible_on_front")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IsVisibleOnFront { get; set; }

        [JsonProperty("used_in_product_listing")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long UsedInProductListing { get; set; }

        [JsonProperty("is_visible")]
        public bool IsVisible { get; set; }

        [JsonProperty("scope")]
        public string Scope { get; set; }

        [JsonProperty("attribute_id")]
        public long AttributeId { get; set; }

        [JsonProperty("attribute_code")]
        public string AttributeCode { get; set; }

        [JsonProperty("frontend_input")]
        public string FrontendInput { get; set; }

        [JsonProperty("entity_type_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long EntityTypeId { get; set; }

        [JsonProperty("is_required")]
        public bool IsRequired { get; set; }

        [JsonProperty("options")]
        public List<Option> Options { get; set; }

        [JsonProperty("is_user_defined")]
        public bool IsUserDefined { get; set; }

        [JsonProperty("default_frontend_label")]
        public string DefaultFrontendLabel { get; set; }

        [JsonProperty("frontend_labels")]
        public List<object> FrontendLabels { get; set; }

        [JsonProperty("backend_type")]
        public string BackendType { get; set; }

        [JsonProperty("source_model")]
        public string SourceModel { get; set; }

        [JsonProperty("default_value")]
        public string DefaultValue { get; set; }

        [JsonProperty("is_unique")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IsUnique { get; set; }

        [JsonProperty("validation_rules")]
        public List<object> ValidationRules { get; set; }
    }

    public partial class Option
    {
        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public partial class SearchCriteria
    {
        [JsonProperty("filter_groups")]
        public List<FilterGroup> FilterGroups { get; set; }
    }

    public partial class FilterGroup
    {
        [JsonProperty("filters")]
        public List<Filter> Filters { get; set; }
    }

    public partial class Filter
    {
        [JsonProperty("field")]
        public string Field { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }

        [JsonProperty("condition_type")]
        public string ConditionType { get; set; }
    }

    public partial class AttributeSearchCriteria
    {
        public static AttributeSearchCriteria FromJson(string json) => JsonConvert.DeserializeObject<AttributeSearchCriteria>(json, WebservicesSage.Object.Search.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AttributeSearchCriteria self) => JsonConvert.SerializeObject(self, WebservicesSage.Object.Search.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}